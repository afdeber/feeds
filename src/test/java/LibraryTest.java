/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import calendar.BlackDaysCalendar;
import org.junit.Test;


import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void seller_sells_item_with_shipping_its_fee_is_percentage_3_point_5() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(100.0), new Shipment(100.0) );

        assertEquals(new Fee(7.0), s.fee() );

    }

    @Test
    public void seller_sells_item_with_shipping_different_mount_its_fee_is_percentage_3_point_5() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(200.0), new Shipment(200.0) );

        assertEquals(new Fee(14.0), s.fee() );

    }

    @Test
    public void seller_sells_item_which_price_is_bigger_than_1000_it_is_charged_based_on_item_value_by_percentage_2() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(1000.0), new Shipment(200.0) );

        assertEquals(new Fee(24.0), s.fee() );

    }

    @Test
    public void seller_sells_item_durring_black_friday_it_is_charged_considering_item_value_only() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(1000.0), new Shipment(200.0) );

        assertEquals( new Fee(35.0), s.fee( new BlackDaysCalendar() ) );

    }

    @Test
    public void seller_sells_item_and_it_is_charged_after_four_items_and_it_is_charged_considering_first_item_value_only() {
        Seller seller = new Seller();
        Sell s = seller.sells( new Item(200.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .close();

        assertEquals(s.fee(), new Fee(7.0));

    }

    @Test
    public void seller_sells_item_and_it_is_charged_after_four_items_and_it_is_charged_zero_whether_sell_is_not_close() {
        Seller seller = new Seller();
        Sell s = seller.sells( new Item(200.0) )
                .and( new Item(1000.0) );

        assertEquals(s.fee(), new Fee(0.0));

    }

    @Test
    public void seller_sells_item_and_it_is_charged_after_four_shipped_items_and_it_is_charged_considering_first_item_value_only() {
        Seller seller = new Seller();
        Sell s = seller.sells( new Item(200.0), new Shipment(200.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .close();

        assertEquals(s.fee(), new Fee(14.0));

    }
}
