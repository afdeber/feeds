/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import calendar.BlackDaysCalendar;
import org.junit.Test;

import java.time.LocalDateTime;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void seller_sells_item_with_shipping_its_fee_is_percentage_3_point_5() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(100.0), new Shipment(100.0) );

        assertEquals(new Fee(7.0), s.fee() );
    }

    @Test
    public void seller_sells_item_with_shipping_different_amount_its_fee_is_percentage_3_point_5() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(200.0), new Shipment(200.0) );

        assertEquals(new Fee(14.0), s.fee() );
    }

    @Test
    public void seller_sells_item_which_price_is_bigger_than_1000_is_charged_based_on_item_value_by_percentage_2() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(1000.0), new Shipment(200.0) );

        assertEquals(new Fee(24.0), s.fee() );
    }

    @Test
    public void seller_sells_item_durring_black_friday_is_charged_considering_item_value_only() {
        Seller seller = new Seller();
        SingleSell s = seller.sells( new Item(1000.0), new Shipment(200.0) );

        assertEquals( new Fee(35.0), s.fee( new BlackDaysCalendar() ) );
    }

    @Test
    public void seller_sells_item_and_it_is_charged_after_four_items_and_is_charged_considering_first_item_value_only() {
        Seller seller = new Seller();
        Sell s = seller.sells( new Item(200.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .close();

        assertEquals(s.fee(), new Fee(7.0));
    }

    @Test
    public void seller_sells_item_and_it_is_charged_after_four_items_and_is_charged_zero_whether_sell_is_not_close() {
        Seller seller = new Seller();
        Sell s = seller.sells( new Item(200.0) )
                .and( new Item(1000.0) );

        assertEquals(s.fee(), new Fee(0.0));
    }

    @Test
    public void seller_sells_item_and_it_is_charged_after_four_shipped_items_and_is_charged_considering_first_item_value_only() {
        Seller seller = new Seller();
        Sell s = seller.sells( new Item(200.0), new Shipment(200.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .and( new Item(1000.0) )
                .close();

        assertEquals(s.fee(), new Fee(14.0));
    }

    @Test
    public void seller_does_2_sells_within_2_hours_and_is_charged_5_percent_less_each() {
        Seller seller = new Seller();

        Sell s1 = seller.sells(new Item(200.0), new Shipment(200.0));
        Sell s2 = seller.sells(new Item(300.0), new Shipment(200.0), s1.sellingDate().plusHours(1).plusMinutes(21));

        Promotion p = new Promotion(2L, 5.0, s1, s2);

        assertEquals(p.fee(), new Fee(31.5).percentage(95.0));
    }

    @Test
    public void seller_does_6_sells_having_5_within_2_hours_of_difference_and_is_charged_5_percent_less_each() {
        Seller seller = new Seller();

        Sell s1 = seller.sells(new Item(200.0), new Shipment(200.0));
        Sell s2 = seller.sells(new Item(300.0), new Shipment(200.0), s1.sellingDate().plusHours(1).plusMinutes(21));
        Sell s3 = seller.sells(new Item(2500.0), new Shipment(200.0), s2.sellingDate().plusHours(3));
        Sell s4 = seller.sells(new Item(500.0), new Shipment(200.0), s3.sellingDate().plusHours(2).plusMinutes(7));
        Sell s5 = seller.sells(new Item(100.0), new Shipment(200.0), s4.sellingDate().plusMinutes(34));
        Sell s6 = seller.sells(new Item(110.0), new Shipment(200.0), s5.sellingDate().plusMinutes(47));

        Promotion p = new Promotion(2L, 5.0, s5, s2, s4, s1, s6, s3);

        assertEquals(p.fee(), new Fee(77.35).percentage(95.0));
    }
}
